---
title: "Lab: gradient methods"
subtitle: "BIOS 731: Advanced Statistical Computing"
author: "Julia Wrobel"
output:
  html_document: 
    code_folding: hide
    toc: true
    toc_float: true
hitheme: tomorrow
highlighter: highlight.js
---

```{r, echo= FALSE, include = FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  fig.width = 7,
  fig.height = 5
)

theme_set(theme_bw() + theme(legend.position = "bottom"))
```




## **Exercise 1**: MM for sample median

The code below performs implements an MM algorithm for finding the sample median.  Simulate data with a true median of $\theta$. Compare the MM algorithm with the median value obtained using `median()`
**note**: you will need to choose an initial value for $\theta$.


- you may note that the MM value is different from that obtained using `median()`. Why?




```{r, eval = FALSE}
iter = 1
tol_criteria = Inf

# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
m = NA


####
## Add initial value

theta = theta0

while(iter < max_iter  & tol_criteria > tol){

  ###############################################################
  ## Majorization
  ###############################################################

  objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
  w = 1/abs(y-theta)

  ###############################################################
  ## Minimization
  ###############################################################

  theta = sum(w * y)/sum(w)
  m[iter] = theta
  ###############################################################

  if(iter > 1){
    tol_criteria = abs(objective[iter] - objective[iter-1])
  }
  iter = iter + 1
  message(paste0("iteration: ", iter, "; ll: ", round(tol_criteria, 4)))
}
```

```{r}
library(ggplot2)
library(dplyr)

# Function for iterative median estimation
median_estimation <- function(y, theta0, max_iter = 100, tol = 1e-8) {
  iter <- 1
  tol_criteria <- Inf
  objective <- numeric(max_iter)
  theta_vec <- numeric(max_iter)
  
  theta <- theta0
  
  while(iter < max_iter & tol_criteria > tol) {
    # Majorization step
    objective[iter] <- 1/2 * sum((y - theta)^2 / abs(y - theta) + abs(y - theta))
    w <- 1 / abs(y - theta)
    
    # Minimization step
    theta <- sum(w * y) / sum(w)
    theta_vec[iter] <- theta
    
    # Tolerance check
    if(iter > 1) {
      tol_criteria <- abs(objective[iter] - objective[iter - 1])
    }
    
    iter <- iter + 1
  }
  
  return(theta)
}



# Simulation function
simulate_median_estimation <- function(true_median, n = 100, simulations = 50) {
  results <- list()
  
  for (i in 1:simulations) {
    y <- rnorm(n, mean = true_median, sd = 1)  # Generate data
    
    est <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
    
    result <- data.frame(est = est)
    result$simulation <- i
    result$true_median <- true_median
    result$median_R <- median(y)
    results[[i]] <- result
  }
  
  return(do.call(rbind, results))
}

# Run simulations for different true medians
set.seed(123)
true_medians <- c(0, 1, 2)
simulation_results <- do.call(rbind, lapply(true_medians, simulate_median_estimation))

# Plot results
ggplot(simulation_results, aes(x = iteration, y = estimate, group = interaction(simulation, true_median), color = as.factor(true_median))) +
  geom_line(alpha = 0.5) +
  geom_hline(aes(yintercept = true_median, color = as.factor(true_median)), linetype = "dashed") +
  labs(title = "Convergence of Iterative Median Estimation",
       x = "Iteration", y = "Estimated Median",
       color = "True Median") +
  theme_minimal()

```


## **Exercise 2**: MM for Bradley-Terry ranking

The `baseball` dataset has baseball results for 7 teams from the 1987 season.   

```{r}
library(BradleyTerry2)

data(baseball)
head(baseball)
```


Modify code above to implement solution to Bradley-Terry ranking. Estimate the Ranking comparing Milwaukee to New York and Milwaukee to Boston.


```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)

# Bradley-Terry Ranking Function
# the number fo wins for row team 
bradley_terry_rank <- function(win_matrix, max_iter = 100, tol = 1e-8) {
  
  # Iterative MM algorithm for updating theta
  iter <- 1
  tol_criteria <- Inf
  theta <- rep(1, nrow(win_matrix))
  
  while (iter < max_iter & tol_criteria > tol) {
    theta_old <- theta
    theta_new <- numeric(nrow(win_matrix))
    
    for (i in 1:n_teams) {
      sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
      sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
      
      theta_new[i] <- sum_wins / sum_ratio  # Update theta
    }
    
    theta <- theta_new
    tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
    iter <- iter + 1
  }
  
  # Convert results to a dataframe
  ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
    arrange(desc(Score))
  
  return(ranking)
}


# Compute Bradley-Terry Rankings
# Extract unique teams
teams <- unique(c(baseball$home.team, baseball$away.team))
n_teams <- length(teams)

# Create a matrix for wins between each team pairing
win_matrix <- matrix(0, nrow = n_teams, ncol = n_teams, dimnames = list(teams, teams))
  
# Populate matrix with wins
for (i in 1:nrow(baseball)) {
   home <- baseball$home.team[i]
   away <- baseball$away.team[i]
    
   win_matrix[home, away] <- win_matrix[home, away] + baseball$home.wins[i]
   win_matrix[away, home] <- win_matrix[away, home] + baseball$away.wins[i]
}
  
bt_ranking <- bradley_terry_rank(win_matrix)

```



