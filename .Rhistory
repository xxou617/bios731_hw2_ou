theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text for readability
library(ggplot2)
ggplot(simu_out, aes(x = methods, y = estimate, color = methods)) +
geom_point(size = 3) +  # Points for estimates
geom_errorbar(aes(ymin = CI.lower, ymax = CI.upper), width = 0.2) +  # Error bars
facet_grid(. ~ beta) +  # Facet grid by beta
geom_hline(aes(yintercept = ifelse(beta == "est_beta0", 1.0, 0.3)),
color = "red", linetype = "dashed") +  # Reference line
labs(x = "Methods", y = "Estimate", title = "Estimates by Method with Confidence Intervals") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text for readability
simu_out
ggplot(simu_out, aes(x = methods, y = estimate, color = methods)) +
geom_point(size = 3) +  # Points for estimates
geom_errorbar(aes(ymin = CI.lower, ymax = CI.up), width = 0.2) +  # Error bars
facet_grid(. ~ beta) +  # Facet grid by beta
geom_hline(aes(yintercept = ifelse(beta == "est_beta0", 1.0, 0.3)),
color = "red", linetype = "dashed") +  # Reference line
labs(x = "Methods", y = "Estimate", title = "Estimates by Method with Confidence Intervals") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text for readability
freshr::freshr()
iter = 1
tol_criteria = Inf
# define vectors to store elements of interest
max_iter = 100
tol = 0.00000001
objective = theta_vec = rep(NA, length = max_iter)
objective
y=1:10
theta0=4
theta = theta0
iter
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
objective
y
theta
theta = 4.3
objective[iter] = 1/2 *sum((y-theta)^2/abs(y-theta) + abs(y-theta))
objective
w = 1/abs(y-theta)
w
theta = sum(w * y)/sum(w)
m[iter] = theta
m = NA
m[iter] = theta
numeric(max_iter)
# Function for iterative median estimation
median_estimation <- function(y, theta0, max_iter = 100, tol = 1e-8) {
iter <- 1
tol_criteria <- Inf
objective <- numeric(max_iter)
theta_vec <- numeric(max_iter)
theta <- theta0
while(iter < max_iter & tol_criteria > tol) {
# Majorization step
objective[iter] <- 1/2 * sum((y - theta)^2 / abs(y - theta) + abs(y - theta))
w <- 1 / abs(y - theta)
# Minimization step
theta <- sum(w * y) / sum(w)
theta_vec[iter] <- theta
# Tolerance check
if(iter > 1) {
tol_criteria <- abs(objective[iter] - objective[iter - 1])
}
iter <- iter + 1
}
return(data.frame(iteration = 1:(iter-1), estimate = theta_vec[1:(iter-1)]))
}
# Simulation function
simulate_median_estimation <- function(true_median, n = 100, simulations = 50) {
results <- list()
for (i in 1:simulations) {
y <- rnorm(n, mean = true_median, sd = 1)  # Generate data
result <- median_estimation(y, theta0 = median(y))  # Apply estimation function
result$simulation <- i
result$true_median <- true_median
results[[i]] <- result
}
return(do.call(rbind, results))
}
# Run simulations for different true medians
set.seed(123)
true_medians <- c(0, 1, 2)
simulation_results <- do.call(rbind, lapply(true_medians, simulate_median_estimation))
simulation_results
simulation_results <- do.call(rbind, lapply(true_medians, simulate_median_estimation))
simulation_results
true_medians
# Simulation function
simulate_median_estimation <- function(true_median, n = 100, simulations = 50) {
results <- list()
for (i in 1:simulations) {
y <- rnorm(n, mean = true_median, sd = 1)  # Generate data
result <- median_estimation(y, theta0 = median(y))  # Apply estimation function
result$simulation <- i
result$true_median <- true_median
result$median_R <- median(y)
results[[i]] <- result
}
return(do.call(rbind, results))
}
simulate_median_estimation(1, n=100, simulations = 20)
# Function for iterative median estimation
median_estimation <- function(y, theta0, max_iter = 100, tol = 1e-8) {
iter <- 1
tol_criteria <- Inf
objective <- numeric(max_iter)
theta_vec <- numeric(max_iter)
theta <- theta0
while(iter < max_iter & tol_criteria > tol) {
# Majorization step
objective[iter] <- 1/2 * sum((y - theta)^2 / abs(y - theta) + abs(y - theta))
w <- 1 / abs(y - theta)
# Minimization step
theta <- sum(w * y) / sum(w)
theta_vec[iter] <- theta
# Tolerance check
if(iter > 1) {
tol_criteria <- abs(objective[iter] - objective[iter - 1])
}
iter <- iter + 1
}
return(data.frame(theta))
}
# Simulation function
simulate_median_estimation <- function(true_median, n = 100, simulations = 50) {
results <- list()
for (i in 1:simulations) {
y <- rnorm(n, mean = true_median, sd = 1)  # Generate data
result <- median_estimation(y, theta0 = median(y))  # Apply estimation function
result$simulation <- i
result$true_median <- true_median
result$median_R <- median(y)
results[[i]] <- result
}
return(do.call(rbind, results))
}
# Run simulations for different true medians
set.seed(123)
true_medians <- c(0, 1, 2)
simulation_results <- do.call(rbind, lapply(true_medians, simulate_median_estimation))
simulation_results
result <- median_estimation(y, theta0 = median(y)+1e3)  # Apply estimation function
y
median(y)+1e3
theta0 = median(y)+1e2
theta0
y
median(y)
median(y)+1e-2
result <- median_estimation(y, theta0 = median(y)+1e-2)  # Apply estimation function
result
# Function for iterative median estimation
median_estimation <- function(y, theta0, max_iter = 100, tol = 1e-8) {
iter <- 1
tol_criteria <- Inf
objective <- numeric(max_iter)
theta_vec <- numeric(max_iter)
theta <- theta0
while(iter < max_iter & tol_criteria > tol) {
# Majorization step
objective[iter] <- 1/2 * sum((y - theta)^2 / abs(y - theta) + abs(y - theta))
w <- 1 / abs(y - theta)
# Minimization step
theta <- sum(w * y) / sum(w)
theta_vec[iter] <- theta
# Tolerance check
if(iter > 1) {
tol_criteria <- abs(objective[iter] - objective[iter - 1])
}
iter <- iter + 1
}
return(theta)
}
result <- median_estimation(y, theta0 = median(y)+1e-2)  # Apply estimation function
result
rnorm(1)
median(y) + rnorm(1)
result <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
result
result <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
result
result$simulation <- i
i=1
result$simulation <- i
result <- data.frame(est)
est <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
est <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
est
result <- data.frame(est)
result
result <- data.frame(est = est)
result
# Simulation function
simulate_median_estimation <- function(true_median, n = 100, simulations = 50) {
results <- list()
for (i in 1:simulations) {
y <- rnorm(n, mean = true_median, sd = 1)  # Generate data
est <- median_estimation(y, theta0 = median(y) + rnorm(1))  # Apply estimation function
result <- data.frame(est = est)
result$simulation <- i
result$true_median <- true_median
result$median_R <- median(y)
results[[i]] <- result
}
return(do.call(rbind, results))
}
# Run simulations for different true medians
set.seed(123)
true_medians <- c(0, 1, 2)
simulation_results <- do.call(rbind, lapply(true_medians, simulate_median_estimation))
# Plot results
ggplot(simulation_results, aes(x = iteration, y = estimate, group = interaction(simulation, true_median), color = as.factor(true_median))) +
geom_line(alpha = 0.5) +
geom_hline(aes(yintercept = true_median, color = as.factor(true_median)), linetype = "dashed") +
labs(title = "Convergence of Iterative Median Estimation",
x = "Iteration", y = "Estimated Median",
color = "True Median") +
theme_minimal()
simulation_results
library(BradleyTerry2)
data(baseball)
head(baseball)
View(baseball)
# Example: Milwaukee vs New York and Milwaukee vs Boston
teams <- c("Milwaukee", "New York", "Boston")
bij_matrix <- matrix(c(
0, 5, 7,  # Milwaukee won 5 times vs New York, 7 vs Boston
3, 0, 6,  # New York won 3 times vs Milwaukee, 6 vs Boston
4, 2, 0   # Boston won 4 times vs Milwaukee, 2 vs New York
), nrow = 3, byrow = TRUE, dimnames = list(teams, teams))
# Estimate rankings
theta_estimates <- bradley_terry(bij_matrix)
bij_matrix
data(baseball)
head(baseball)
data =  baseball
# Extract unique teams
teams <- unique(c(data$home.team, data$away.team))
teams
n_teams <- length(teams)
n_teams
# Initialize theta (skill level) equally
theta <- rep(1, n_teams)
names(theta) <- teams
theta
# Create a matrix for wins between each team pairing
win_matrix <- matrix(0, nrow = n_teams, ncol = n_teams, dimnames = list(teams, teams))
win_matrix
# Populate matrix with wins
for (i in 1:nrow(data)) {
home <- data$home.team[i]
away <- data$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
win_matrix
i=1
home
away
# Extract unique teams
teams <- unique(c(baseball$home.team, baseball$away.team))
n_teams <- length(teams)
# Initialize theta (skill level) equally
theta <- rep(1, n_teams)
names(theta) <- teams
# Create a matrix for wins between each team pairing
win_matrix <- matrix(0, nrow = n_teams, ncol = n_teams, dimnames = list(teams, teams))
# Populate matrix with wins
for (i in 1:nrow(data)) {
home <- data$home.team[i]
away <- data$away.team[i]
# rows win
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
# Bradley-Terry Ranking Function
bradley_terry_rank <- function(data, max_iter = 100, tol = 1e-8) {
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
while (iter < max_iter & tol_criteria > tol) {
theta_old <- theta
theta_new <- numeric(n_teams)
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum(win_matrix[i, -i] / (theta[i] + theta[-i]))  # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
iter <- iter + 1
}
# Convert results to a dataframe
ranking <- data.frame(Team = names(theta), Score = theta) %>%
arrange(desc(Score))
return(ranking)
}
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
theta_old <- theta
theta_new <- numeric(n_teams)
theta_new
win_matrix
theta_new <- numeric(nrow(win_matrix))
theta_new
win_matrix[i, -i]
win_matrix[i, ]
i
i=1
win_matrix[i, -i]
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta_new
# Convert results to a dataframe
ranking <- data.frame(Team = names(theta), Score = theta) %>%
arrange(desc(Score))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Convert results to a dataframe
ranking <- data.frame(Team = names(theta), Score = theta) %>%
arrange(desc(Score))
ranking
theta
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
theta
# Convert results to a dataframe
ranking <- data.frame(Team = names(theta), Score = theta) %>%
arrange(desc(Score))
theta <- theta_new
theta
theta
names(theta)
win_matrix
names(win_matrix)
rownames(win_matrix)
# Convert results to a dataframe
ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
arrange(desc(Score))
ranking
ranking
# Bradley-Terry Ranking Function
bradley_terry_rank <- function(win_matrix, max_iter = 100, tol = 1e-8) {
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
while (iter < max_iter & tol_criteria > tol) {
theta_old <- theta
theta_new <- numeric(nrow(win_matrix))
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
iter <- iter + 1
}
# Convert results to a dataframe
ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
arrange(desc(Score))
return(ranking)
}
win_matrix
# Compute Bradley-Terry Rankings
bt_ranking <- bradley_terry_rank(win_matrix)
bt_ranking
bt_ranking
# Bradley-Terry Ranking Function
# the number fo wins for row team
bradley_terry_rank <- function(win_matrix, max_iter = 100, tol = 1e-8) {
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
while (iter < max_iter & tol_criteria > tol) {
theta_old <- theta
theta_new <- numeric(nrow(win_matrix))
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
iter <- iter + 1
}
# Convert results to a dataframe
ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
arrange(desc(Score))
return(ranking)
}
# Compute Bradley-Terry Rankings
bt_ranking <- bradley_terry_rank(win_matrix)
freshr::freshr()
library(BradleyTerry2)
data(baseball)
head(baseball)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Bradley-Terry Ranking Function
# the number fo wins for row team
bradley_terry_rank <- function(win_matrix, max_iter = 100, tol = 1e-8) {
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
while (iter < max_iter & tol_criteria > tol) {
theta_old <- theta
theta_new <- numeric(nrow(win_matrix))
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
iter <- iter + 1
}
# Convert results to a dataframe
ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
arrange(desc(Score))
return(ranking)
}
# Compute Bradley-Terry Rankings
bt_ranking <- bradley_terry_rank(win_matrix)
nrow(win_matrix)
# Bradley-Terry Ranking Function
# the number fo wins for row team
bradley_terry_rank <- function(win_matrix, max_iter = 100, tol = 1e-8) {
# Iterative MM algorithm for updating theta
iter <- 1
tol_criteria <- Inf
theta <- rep(1, nrow(win_matrix))
while (iter < max_iter & tol_criteria > tol) {
theta_old <- theta
theta_new <- numeric(nrow(win_matrix))
for (i in 1:n_teams) {
sum_wins <- sum(win_matrix[i, -i])  # Total wins of team i
sum_ratio <- sum((win_matrix[i, -i] + win_matrix[-i, i]) / (theta[i] + theta[-i]))   # Denominator from formula
theta_new[i] <- sum_wins / sum_ratio  # Update theta
}
theta <- theta_new
tol_criteria <- max(abs(theta - theta_old))  # Check for convergence
iter <- iter + 1
}
# Convert results to a dataframe
ranking <- data.frame(Team = rownames(win_matrix), Score = theta) %>%
arrange(desc(Score))
return(ranking)
}
# Compute Bradley-Terry Rankings
bt_ranking <- bradley_terry_rank(win_matrix)
# Compute Bradley-Terry Rankings
# Extract unique teams
teams <- unique(c(baseball$home.team, baseball$away.team))
teams
n_teams <- length(teams)
n_teams
# Initialize theta (skill level) equally
names(theta) <- teams
# Create a matrix for wins between each team pairing
win_matrix <- matrix(0, nrow = n_teams, ncol = n_teams, dimnames = list(teams, teams))
# Populate matrix with wins
for (i in 1:nrow(data)) {
home <- data$home.team[i]
away <- data$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
# Populate matrix with wins
for (i in 1:nrow(data)) {
home <- data$home.team[i]
away <- data$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
# Populate matrix with wins
for (i in 1:nrow(data)) {
home <- baseball$home.team[i]
away <- baseball$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
# Populate matrix with wins
for (i in 1:nrow(baseball)) {
home <- baseball$home.team[i]
away <- baseball$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + data$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + data$away.wins[i]
}
# Populate matrix with wins
for (i in 1:nrow(baseball)) {
home <- baseball$home.team[i]
away <- baseball$away.team[i]
win_matrix[home, away] <- win_matrix[home, away] + baseball$home.wins[i]
win_matrix[away, home] <- win_matrix[away, home] + baseball$away.wins[i]
}
win_matrix
bt_ranking <- bradley_terry_rank(win_matrix)
bt_ranking
70*7*7.3*7*5*15
